# Source: r-lib Standard CI workflow: https://github.com/r-lib/actions/tree/master/examples#standard-ci-workflow
# need to add apt-get install texlive-extra-utils  
on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 0 * * 0"

name: check-and-build

jobs:
  check-and-build:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, r: 'release'}
      
    steps:
      - uses: actions/checkout@v2
      
      - name: Decrypt large secret
        run: ./.github/scripts/decrypt_secret.sh
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
          
      - name: Setup R
        uses: r-lib/actions/setup-r@master
        with: 
          r-version: ${{ matrix.config.r }}
          
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v1
        with:
          pandoc-version: '2.9.2' 
      - run: echo "# Test" | pandoc -t html
      
      - name: Setup TinyTex 
        uses: r-lib/actions/setup-tinytex@v1
      - run: tlmgr --version
      
      - name: Install essential dependencies
        run: |
          install.packages(c('renv','remotes'))
          tinytex::reinstall_tinytex()
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}
        
      - name: Cache R Packages
        uses: actions/cache@v2
        with:
          path: ~/.local/share/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-
            
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          eval sudo apt-get install libcurl4-openssl-dev
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "20.04"), sep = "\n")')
          
      - name: Restore project dependencies
        run: |
          remotes::install_cran("rcmdcheck")
          remotes::install_deps(dependencies = TRUE)
          renv::restore()
        shell: Rscript {0}
        
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(error_on = "warning", check_dir = "check")
        shell: Rscript {0}
        
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
          
      - name: Build
        env:
          super_secret: ${{ secrets.GDRIVE_SECRET }}
        run: |
          rmarkdown::render("cv/cv.Rmd", output_dir = "cv")
        shell: Rscript {0}
        
      - name: Commit results
        run: |
          git config --global user.email "mcuoco12@gmail.com"
          git config --global user.name "mikecuoco"
          git add -f cv/cv.md cv/cv.pdf || echo "No changes to add"
          git commit -m 'Re-build cv.Rmd' || echo "No changes to commit"
          git push origin || echo "No changes to commit"

